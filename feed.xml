<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Built by AAAA</title>
    <link href="https://alafariabdullah.sa/feed.xml" rel="self" />
    <link href="https://alafariabdullah.sa" />
    <updated>2025-08-01T04:51:04+03:00</updated>
    <author>
        <name>Abdullah Ameen A. Alafari</name>
    </author>
    <id>https://alafariabdullah.sa</id>

    <entry>
        <title>qBittorrent Docker ‚Äî Torrents Stuck in &quot;Errored&quot; State</title>
        <author>
            <name>Abdullah Ameen A. Alafari</name>
        </author>
        <link href="https://alafariabdullah.sa/rm-rf/qbittorrent-docker-torrents-stuck-in-errored-state/"/>
        <id>https://alafariabdullah.sa/rm-rf/qbittorrent-docker-torrents-stuck-in-errored-state/</id>
            <category term="self-hosting"/>
            <category term="docker"/>
            <category term="Linux"/>

        <updated>2025-06-04T04:50:00+03:00</updated>
            <summary>
                <![CDATA[
                    While self-hosting qBittorrent in Docker on my NAS, I ran into an issue where every torrent I added ended up stuck in an Errored state&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>While self-hosting qBittorrent in Docker on my NAS, I ran into an issue where every torrent I added ended up stuck in an <code>Errored</code> state with 0% progress and no tracker activity.</p><hr>
<h2 id="the-problem">The Problem</h2>
<p>Even though:</p><ul>
<li>The Web UI loaded fine via Tailscale</li>
<li>I could see a healthy number of peers (e.g., 45)</li>
<li>DHT, PeX, and LSD all showed as ‚ÄúWorking‚Äù</li>
<li>DNS and internet were reachable from the container</li>
</ul>
<p>No torrent ever started downloading. The status just stayed like this:</p><pre><code>Status: Errored
Progress: 0.0%
Trackers: Not contacted yet
</code></pre>
<hr>
<h2 id="what-i-tried-first">What I Tried First</h2>
<p>I wanted to make sure this wasn‚Äôt a DNS or network issue. Since I recently added Pi-hole to my network, I checked whether DNS worked correctly using:</p><pre><code class="language-bash">nslookup google.com 192.168.1.1
</code></pre>
<p>Worked perfectly.</p><p>Then I tested network access from inside the container:</p><pre><code class="language-bash">sudo docker exec -it qbittorrent ping google.com
</code></pre>
<p>Also successful ‚Äî packets were getting through. So the network and DNS were clearly not the issue.</p><hr>
<h2 id="finding-the-real-cause">Finding the Real Cause</h2>
<p>After ruling out network issues, I started suspecting a file system permission problem.</p><p>I checked what the container sees for its <code>/downloads</code> folder:</p><pre><code class="language-bash">sudo docker exec -it qbittorrent ls -ld /downloads
</code></pre>
<p>Here‚Äôs what I got:</p><pre><code>d--------- 1 abc abc ... /downloads
</code></pre>
<p>This told me that although the directory existed, it had no permissions ‚Äî not even read or execute. The qBittorrent container had no access to the path it was supposed to write downloaded files to.</p><p>The kicker? On the host, the folder looked completely fine:</p><pre><code class="language-bash">ls -ld &quot;/volume2/Media Server/qbittorrentDownloads&quot;
drwxrwxrwx+ 1 Admin1 users ...
</code></pre>
<p>But Docker‚Äôs user mapping didn‚Äôt translate that correctly inside the container.</p><hr>
<h2 id="how-i-fixed-it">How I Fixed It</h2>
<p>On the NAS host, I updated the ownership and permissions of the downloads directory so that the user inside the container (mapped by PUID 1026 and PGID 100) could actually use it:</p><pre><code class="language-bash">sudo chown -R 1026:100 &quot;/volume2/Media Server/qbittorrentDownloads&quot;
sudo chmod -R 775 &quot;/volume2/Media Server/qbittorrentDownloads&quot;
</code></pre>
<p>Check <a href="https://docs.linuxserver.io/general/understanding-puid-and-pgid/">LinuxServer.io</a> and <a href="https://www.digitalocean.com/community/tutorials/how-to-set-permissions-linux">DigitalOcean</a> for further details regarding <code>PUID</code>, <code>PGID</code>, <code>chown</code>, and <code>chmod</code>.</p><p>Then restarted the container:</p><pre><code class="language-bash">sudo docker restart qbittorrent
</code></pre>
<hr>
<h2 id="what-happened-after">What Happened After</h2>
<p>As soon as the container restarted, the torrents that were stuck in ‚ÄúErrored‚Äù started working immediately.</p><pre><code>Status: Downloading
</code></pre>
<p>Trackers connected. DHT found peers. Files started downloading as expected.</p><hr>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>If you‚Äôre running into similar symptoms‚Äîtorrents stuck at 0% with no real activity, and everything else looks fine‚Äîdon‚Äôt just trust the host‚Äôs folder permissions. Check what the container actually sees.</p><p>Look <em>inside</em> the container for permission issues, especially when using bind mounts with Docker and mapped users like <code>PUID</code>/<code>PGID</code>.</p><p>Sometimes the issue isn‚Äôt with the internet, tracker, or torrent file at all ‚Äî it‚Äôs simply that qBittorrent lacks write access to the disk.</p><h2 id="üñ§-credits">üñ§ Credits</h2>
<p>Written by <a href="https://github.com/AlafariAbdullah">Abdullah Alafari</a></p><p>Connect with me on <a href="www.linkedin.com/in/alafari-abdullah">Linkedin</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>¬†üîÅ Reboot from Linux into any other OS (Dual Boot) via SSH</title>
        <author>
            <name>Abdullah Ameen A. Alafari</name>
        </author>
        <link href="https://alafariabdullah.sa/rm-rf/reboot-from-linux-into-any-other-os-dual-boot-via-ssh/"/>
        <id>https://alafariabdullah.sa/rm-rf/reboot-from-linux-into-any-other-os-dual-boot-via-ssh/</id>
        <media:content url="https://alafariabdullah.sa/media/posts/4/Grub-Menu-Dual-Boot.jpeg" medium="image" />
            <category term="remote"/>
            <category term="grub"/>
            <category term="Linux"/>

        <updated>2025-04-24T03:59:00+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://alafariabdullah.sa/media/posts/4/Grub-Menu-Dual-Boot.jpeg" alt="" />
                    This guide shows how to remotely reboot into Any Grub Boot Menu option while remoting into linux on a dual-boot system. ‚úÖ For example: when&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://alafariabdullah.sa/media/posts/4/Grub-Menu-Dual-Boot.jpeg" class="type:primaryImage" alt="" /></p>
                <p>This guide shows how to <strong>remotely reboot into Any Grub Boot Menu option while remoting into linux</strong> on a dual-boot system.</p><blockquote>
<p>‚úÖ For example: when you‚Äôre SSH‚Äôd into a Linux system (e.g., Linux Mint) and want the <strong>next boot to go to Windows</strong> without physically interacting with the machine.</p></blockquote>
<hr>
<h2 id="üìã-prerequisites">üìã Prerequisites</h2>
<ul>
<li>Dual boot setup with Linux (e.g., Mint) and another OS</li>
<li>GRUB bootloader and boot menu</li>
<li>SSH access to the Linux system</li>
</ul>
<hr>
<p>For full details, Check <a href="https://www.gnu.org/software/grub/grub-documentation.html">Grub‚Äôs Official Documentation</a></p><h2 id="üßæ-step-by-step">üßæ Step-by-Step</h2>
<p>For this example, I assume you want to boot into your windows for simplicity</p><h3 id="1-üîç-find-the-windows-grub-entry">1. üîç Find the Windows GRUB entry</h3>
<p>What we‚Äôre doing is basically filtering through <code>/boot/grub/grub.cfg</code> to get the lines we want, there‚Äôre many ways to do so but the simplest is just to run this command:</p><pre><code class="language-bash">awk -F\&#39; &#39;/menuentry / {print i++ &quot;: &quot; $2}&#39; /boot/grub/grub.cfg
</code></pre>
<p>The output will look something like this: </p><pre><code>0: Linux Mint 22 Cinnamon
1: Linux Mint 22 Cinnamon, with Linux 6.8.0-40-generic
2: Linux Mint 22 Cinnamon, with Linux 6.8.0-40-generic (recovery mode)
3: Linux Mint 22 Cinnamon, with Linux 6.8.0-39-generic
4: Linux Mint 22 Cinnamon, with Linux 6.8.0-39-generic (recovery mode)
5: Linux Mint 22 Cinnamon, with Linux 6.8.0-38-generic
6: Linux Mint 22 Cinnamon, with Linux 6.8.0-38-generic (recovery mode)
7: Windows Boot Manager (on /dev/nvme0n1p1)
8: UEFI Firmware Settings
</code></pre>
<p>Copy the name <strong>exactly</strong>, without the index:
<code>Windows Boot Manager (on /dev/nvme0n1p1)</code></p><p>Or, if for any reason you didn‚Äôt find the Windows entry, run this command:</p><pre><code class="language-bash">sudo grep -i menuentry /boot/grub/grub.cfg
</code></pre>
<p>And look for:</p><pre><code>menuentry &#39;Windows Boot Manager (on /dev/nvme0n1p1)&#39; --class windows --class os ...
</code></pre>
<p>The name is in quotes.</p><hr>
<h3 id="2-üöÄ-reboot-into-windows-once">2. üöÄ Reboot into Windows (once)</h3>
<p>Now that you have your menu entry, just use <code>grub-reboot</code> with it:</p><pre><code class="language-bash">sudo grub-reboot &quot;Windows Boot Manager (on /dev/nvme0n1p1)&quot;
sudo reboot
</code></pre>
<p>The name in <code>&quot;&quot;</code> should be <strong>exact</strong>.</p><p>For this example, the system will reboot <strong>into Windows one time</strong>, then revert to the default OS (Linux for me).</p><hr>
<h3 id="3-optional-üîÅ-make-windows-the-default">3. (Optional) üîÅ Make Windows the default</h3>
<p>To boot into Windows <strong>every time by default</strong>:</p><pre><code class="language-bash">sudo grub-set-default &quot;Windows Boot Manager (on /dev/nvme0n1p1)&quot;
sudo update-grub
</code></pre>
<p>You can undo this later with:</p><pre><code class="language-bash">sudo grub-set-default 0  # Assuming Linux is first entry, index works as the image shows
sudo update-grub
</code></pre>
<hr>
<h3 id="4-extra">4. Extra:</h3>
<p>You‚Äôd use the index instead of the name to reboot into the OS once:</p><pre><code class="language-bash">sudo grub-reboot 2
sudo reboot
</code></pre>
<hr>
<h2 id="üß†-notes">üß† Notes</h2>
<ul>
<li>This uses GRUB‚Äôs <strong>temporary boot override</strong> via <code>grub-reboot</code></li>
<li>You need <code>sudo</code> privileges to run it</li>
</ul>
<hr>
<h2 id="üßµ-related-grub-commands">üßµ Related GRUB Commands</h2>
<ul>
<li><code>grub-reboot</code> ‚Äì Set next boot only</li>
<li><code>grub-set-default</code> ‚Äì Change default permanently</li>
<li><code>update-grub</code> ‚Äì Regenerates GRUB menu</li>
</ul>
<hr>
<h2 id="future">Future:</h2>
<ul>
<li>Make it a simple script so you‚Äôd remotely run to avoid the manual process</li>
</ul>
<hr>
<h2 id="üñ§-credits">üñ§ Credits</h2>
<p>Written by <a href="https://github.com/AlafariAbdullah">Abdullah Alafari</a>, tested on Linux Mint 22 Cinnamon with GRUB2.</p><p>Connect with me on <a href="www.linkedin.com/in/alafari-abdullah">Linkedin</a></p>
            ]]>
        </content>
    </entry>
</feed>
